from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from . import keyboards as kb
from .database import requests as rq
from .states import Ans
import random as rand
import numpy as np

r = Router()


@r.message(CommandStart())
async def start(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\nüëã –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤! üåü\nüéØ –¶–µ–ª—å –ø—Ä–æ—Å—Ç–∞—è: –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ª–µ–≥–∫–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –î–∞–≤–∞–π –Ω–∞—á–∏–Ω–∞—Ç—å! üòä",
        reply_markup=kb.main,
    )


@r.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å ‚öôÔ∏è")
async def profile(message: Message):
    await message.answer(
        f"üë§ –£—á–µ–Ω–∏–∫: {message.from_user.first_name}\n\nüÜî ID: {message.from_user.id}\n\nüî¢ –ö–æ–ª-–≤–æ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤: {len([i for i in await rq.get_words(message.from_user.id)])}",
        reply_markup=kb.back,
    )

@r.message(F.text == '–ù–∞–∑–∞–¥ üîô')
async def back(message: Message):
    await message.answer(f"–ß–µ–º —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è, {message.from_user.first_name}? üòä", reply_markup=kb.main)
    
@r.message(F.text == '–ú–æ–∏ —Å–ª–æ–≤–∞ üìì')
async def my_words(message: Message):
    await message.answer('–¢–≤–æ–∏ —Å–ª–æ–≤–∞ üìì', reply_markup=await kb.words_quantity(message.from_user.id))

@r.callback_query(F.data == 'add')
async def add_word(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(Ans.word_eng)
    await callback.message.edit_text('–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º')

@r.message(Ans.word_eng)
async def add_eng_word(message: Message, state: FSMContext):
    await state.update_data(word_eng=message.text)
    await state.set_state(Ans.word_rus)
    await message.reply('–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º')

@r.message(Ans.word_rus)
async def add_rus_word(message: Message, state: FSMContext):
    await state.update_data(word_rus=message.text)
    data = await state.get_data()
    check = await rq.set_words(message.from_user.id, [data[i] for i in data.keys()])
    if check:
        await message.answer(f'–°–ª–æ–≤–æ: {data['word_eng']} —É–∂–µ –µ—Å—Ç—å –≤ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏')
    else:
        await message.answer(f'–°–ª–æ–≤–æ {data['word_eng']} –¥–æ–±–∞–≤–ª–µ–Ω–æ')
        await message.answer(f'–¢–≤–æ–∏ —Å–ª–æ–≤–∞', reply_markup=await kb.words_quantity(message.from_user.id))
    await state.clear()

@r.callback_query(F.data.startswith('word_'))
async def word_info(callback: CallbackQuery, state: FSMContext):
    word = await rq.get_word_info(callback.from_user.id, callback.data.split('_')[1].strip())
    await callback.message.edit_text(f'{word[0]} -> {word[1]}', reply_markup=kb.word_info)
    await state.set_state(Ans.current_word)
    await state.update_data(current_word=word[0])

@r.callback_query(F.data == 'delete')
async def delete_info(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await rq.delete_words(callback.from_user.id, data['current_word'])
    await callback.message.edit_text(f'–°–ª–æ–≤–æ: {data['current_word']} —É–¥–∞–ª–µ–Ω–æ')
    await state.clear()
    await callback.message.answer(f'–¢–≤–æ–∏ —Å–ª–æ–≤–∞', reply_markup=await kb.words_quantity(callback.from_user.id))

@r.callback_query(F.data == 'back')
async def delete_info(callback: CallbackQuery):
    await callback.message.edit_text(f'–¢–≤–æ–∏ —Å–ª–æ–≤–∞', reply_markup=await kb.words_quantity(callback.from_user.id))

async def ask_question(message: Message, state: FSMContext):
    all_words = await rq.get_words(message.from_user.id)
    all_words = list(all_words)
    random_word = all_words[rand.randint(0, len(all_words) - 1)][0]
    await state.set_state(Ans.question)
    await state.update_data(question=random_word)
    await message.answer(f'–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ üåç:\n{random_word} üî§', reply_markup=await kb.learning(message.from_user.id, random_word))
    await state.set_state(Ans.user_answer)

@r.message(Ans.user_answer)
async def add_rus_word(message: Message, state: FSMContext):
    await state.update_data(user_answer=message.text)
    data = await state.get_data()
    check = await rq.check_rus_answer(message.from_user.id, data['question'], data['user_answer'])
    if check:
        await message.answer(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! ‚úÖ\n{data['question']} –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫: {data['user_answer']} üåü")
        await state.clear()
    else:
        await message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç üòï. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
        await ask_question(message, state)

@r.message(F.text == '–û–±—É—á–µ–Ω–∏–µ üìù')
async def start_learning(message: Message, state: FSMContext):
    await message.answer('–ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –≤ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è üéì')
    await ask_question(message, state)